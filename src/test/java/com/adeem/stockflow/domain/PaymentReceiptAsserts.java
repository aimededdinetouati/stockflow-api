package com.adeem.stockflow.domain;

import static com.adeem.stockflow.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PaymentReceiptAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentReceiptAllPropertiesEquals(PaymentReceipt expected, PaymentReceipt actual) {
        assertPaymentReceiptAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentReceiptAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentReceiptAllUpdatablePropertiesEquals(PaymentReceipt expected, PaymentReceipt actual) {
        assertPaymentReceiptUpdatableFieldsEquals(expected, actual);
        assertPaymentReceiptUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentReceiptAutoGeneratedPropertiesEquals(PaymentReceipt expected, PaymentReceipt actual) {
        assertThat(actual)
            .as("Verify PaymentReceipt auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentReceiptUpdatableFieldsEquals(PaymentReceipt expected, PaymentReceipt actual) {
        assertThat(actual)
            .as("Verify PaymentReceipt relevant properties")
            .satisfies(a -> assertThat(a.getReceiptNumber()).as("check receiptNumber").isEqualTo(expected.getReceiptNumber()))
            .satisfies(a ->
                assertThat(a.getSubmissionDate())
                    .as("check submissionDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getSubmissionDate())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a ->
                assertThat(a.getReviewDate())
                    .as("check reviewDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getReviewDate())
            )
            .satisfies(a -> assertThat(a.getReviewNotes()).as("check reviewNotes").isEqualTo(expected.getReviewNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentReceiptUpdatableRelationshipsEquals(PaymentReceipt expected, PaymentReceipt actual) {
        assertThat(actual)
            .as("Verify PaymentReceipt relationships")
            .satisfies(a -> assertThat(a.getPayment()).as("check payment").isEqualTo(expected.getPayment()));
    }
}
