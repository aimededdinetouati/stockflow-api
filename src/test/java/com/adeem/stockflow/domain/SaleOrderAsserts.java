package com.adeem.stockflow.domain;

import static com.adeem.stockflow.domain.AssertUtils.bigDecimalCompareTo;
import static com.adeem.stockflow.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class SaleOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOrderAllPropertiesEquals(SaleOrder expected, SaleOrder actual) {
        assertSaleOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertSaleOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOrderAllUpdatablePropertiesEquals(SaleOrder expected, SaleOrder actual) {
        assertSaleOrderUpdatableFieldsEquals(expected, actual);
        assertSaleOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOrderAutoGeneratedPropertiesEquals(SaleOrder expected, SaleOrder actual) {
        assertThat(actual)
            .as("Verify SaleOrder auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOrderUpdatableFieldsEquals(SaleOrder expected, SaleOrder actual) {
        assertThat(actual)
            .as("Verify SaleOrder relevant properties")
            .satisfies(a -> assertThat(a.getReference()).as("check reference").isEqualTo(expected.getReference()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getDate())
            )
            .satisfies(a ->
                assertThat(a.getDueDate()).as("check dueDate").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getDueDate())
            )
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a ->
                assertThat(a.getTvaRate()).as("check tvaRate").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTvaRate())
            )
            .satisfies(a ->
                assertThat(a.getStampRate()).as("check stampRate").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getStampRate())
            )
            .satisfies(a ->
                assertThat(a.getDiscountRate())
                    .as("check discountRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscountRate())
            )
            .satisfies(a ->
                assertThat(a.getTvaAmount()).as("check tvaAmount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTvaAmount())
            )
            .satisfies(a ->
                assertThat(a.getStampAmount())
                    .as("check stampAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getStampAmount())
            )
            .satisfies(a ->
                assertThat(a.getDiscountAmount())
                    .as("check discountAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscountAmount())
            )
            .satisfies(a ->
                assertThat(a.getSubTotal()).as("check subTotal").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getSubTotal())
            )
            .satisfies(a -> assertThat(a.getTotal()).as("check total").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotal()))
            .satisfies(a -> assertThat(a.getSaleType()).as("check saleType").isEqualTo(expected.getSaleType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOrderUpdatableRelationshipsEquals(SaleOrder expected, SaleOrder actual) {
        assertThat(actual)
            .as("Verify SaleOrder relationships")
            .satisfies(a -> assertThat(a.getPayment()).as("check payment").isEqualTo(expected.getPayment()))
            .satisfies(a -> assertThat(a.getClientAccount()).as("check clientAccount").isEqualTo(expected.getClientAccount()))
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()));
    }
}
