package com.adeem.stockflow.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ResourceLimitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceLimitAllPropertiesEquals(ResourceLimit expected, ResourceLimit actual) {
        assertResourceLimitAutoGeneratedPropertiesEquals(expected, actual);
        assertResourceLimitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceLimitAllUpdatablePropertiesEquals(ResourceLimit expected, ResourceLimit actual) {
        assertResourceLimitUpdatableFieldsEquals(expected, actual);
        assertResourceLimitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceLimitAutoGeneratedPropertiesEquals(ResourceLimit expected, ResourceLimit actual) {
        assertThat(actual)
            .as("Verify ResourceLimit auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceLimitUpdatableFieldsEquals(ResourceLimit expected, ResourceLimit actual) {
        assertThat(actual)
            .as("Verify ResourceLimit relevant properties")
            .satisfies(a -> assertThat(a.getResourceType()).as("check resourceType").isEqualTo(expected.getResourceType()))
            .satisfies(a -> assertThat(a.getMaxAmount()).as("check maxAmount").isEqualTo(expected.getMaxAmount()))
            .satisfies(a -> assertThat(a.getIsUnlimited()).as("check isUnlimited").isEqualTo(expected.getIsUnlimited()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceLimitUpdatableRelationshipsEquals(ResourceLimit expected, ResourceLimit actual) {
        assertThat(actual)
            .as("Verify ResourceLimit relationships")
            .satisfies(a -> assertThat(a.getPlanFormula()).as("check planFormula").isEqualTo(expected.getPlanFormula()));
    }
}
