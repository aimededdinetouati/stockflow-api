package com.adeem.stockflow.domain;

import static com.adeem.stockflow.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class QuotaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotaAllPropertiesEquals(Quota expected, Quota actual) {
        assertQuotaAutoGeneratedPropertiesEquals(expected, actual);
        assertQuotaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotaAllUpdatablePropertiesEquals(Quota expected, Quota actual) {
        assertQuotaUpdatableFieldsEquals(expected, actual);
        assertQuotaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotaAutoGeneratedPropertiesEquals(Quota expected, Quota actual) {
        assertThat(actual)
            .as("Verify Quota auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotaUpdatableFieldsEquals(Quota expected, Quota actual) {
        assertThat(actual)
            .as("Verify Quota relevant properties")
            .satisfies(a -> assertThat(a.getResourceType()).as("check resourceType").isEqualTo(expected.getResourceType()))
            .satisfies(a -> assertThat(a.getUsedAmount()).as("check usedAmount").isEqualTo(expected.getUsedAmount()))
            .satisfies(a -> assertThat(a.getMaxAmount()).as("check maxAmount").isEqualTo(expected.getMaxAmount()))
            .satisfies(a ->
                assertThat(a.getResetDate())
                    .as("check resetDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getResetDate())
            )
            .satisfies(a -> assertThat(a.getLastUpdated()).as("check lastUpdated").isEqualTo(expected.getLastUpdated()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotaUpdatableRelationshipsEquals(Quota expected, Quota actual) {
        assertThat(actual)
            .as("Verify Quota relationships")
            .satisfies(a -> assertThat(a.getClientAccount()).as("check clientAccount").isEqualTo(expected.getClientAccount()));
    }
}
