package com.adeem.stockflow.domain;

import static com.adeem.stockflow.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ReturnOrderItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReturnOrderItemAllPropertiesEquals(ReturnOrderItem expected, ReturnOrderItem actual) {
        assertReturnOrderItemAutoGeneratedPropertiesEquals(expected, actual);
        assertReturnOrderItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReturnOrderItemAllUpdatablePropertiesEquals(ReturnOrderItem expected, ReturnOrderItem actual) {
        assertReturnOrderItemUpdatableFieldsEquals(expected, actual);
        assertReturnOrderItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReturnOrderItemAutoGeneratedPropertiesEquals(ReturnOrderItem expected, ReturnOrderItem actual) {
        assertThat(actual)
            .as("Verify ReturnOrderItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReturnOrderItemUpdatableFieldsEquals(ReturnOrderItem expected, ReturnOrderItem actual) {
        assertThat(actual)
            .as("Verify ReturnOrderItem relevant properties")
            .satisfies(a ->
                assertThat(a.getQuantity()).as("check quantity").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getQuantity())
            )
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a ->
                assertThat(a.getSubtotal()).as("check subtotal").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getSubtotal())
            )
            .satisfies(a ->
                assertThat(a.getAllocatedDiscount())
                    .as("check allocatedDiscount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getAllocatedDiscount())
            )
            .satisfies(a -> assertThat(a.getTotal()).as("check total").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotal()))
            .satisfies(a -> assertThat(a.getReturnReason()).as("check returnReason").isEqualTo(expected.getReturnReason()))
            .satisfies(a -> assertThat(a.getCondition()).as("check condition").isEqualTo(expected.getCondition()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getIsRefundable()).as("check isRefundable").isEqualTo(expected.getIsRefundable()))
            .satisfies(a -> assertThat(a.getIsRestockable()).as("check isRestockable").isEqualTo(expected.getIsRestockable()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReturnOrderItemUpdatableRelationshipsEquals(ReturnOrderItem expected, ReturnOrderItem actual) {
        assertThat(actual)
            .as("Verify ReturnOrderItem relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()))
            .satisfies(a ->
                assertThat(a.getOriginalSaleOrderItem()).as("check originalSaleOrderItem").isEqualTo(expected.getOriginalSaleOrderItem())
            )
            .satisfies(a ->
                assertThat(a.getOriginalPurchaseOrderItem())
                    .as("check originalPurchaseOrderItem")
                    .isEqualTo(expected.getOriginalPurchaseOrderItem())
            )
            .satisfies(a -> assertThat(a.getReturnOrder()).as("check returnOrder").isEqualTo(expected.getReturnOrder()));
    }
}
