package com.adeem.stockflow.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaymentConfigurationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentConfigurationAllPropertiesEquals(PaymentConfiguration expected, PaymentConfiguration actual) {
        assertPaymentConfigurationAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentConfigurationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentConfigurationAllUpdatablePropertiesEquals(PaymentConfiguration expected, PaymentConfiguration actual) {
        assertPaymentConfigurationUpdatableFieldsEquals(expected, actual);
        assertPaymentConfigurationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentConfigurationAutoGeneratedPropertiesEquals(PaymentConfiguration expected, PaymentConfiguration actual) {
        assertThat(actual)
            .as("Verify PaymentConfiguration auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentConfigurationUpdatableFieldsEquals(PaymentConfiguration expected, PaymentConfiguration actual) {
        assertThat(actual)
            .as("Verify PaymentConfiguration relevant properties")
            .satisfies(a ->
                assertThat(a.getOnlinePaymentEnabled()).as("check onlinePaymentEnabled").isEqualTo(expected.getOnlinePaymentEnabled())
            )
            .satisfies(a -> assertThat(a.getCcp()).as("check ccp").isEqualTo(expected.getCcp()))
            .satisfies(a -> assertThat(a.getRip()).as("check rip").isEqualTo(expected.getRip()))
            .satisfies(a -> assertThat(a.getRib()).as("check rib").isEqualTo(expected.getRib()))
            .satisfies(a -> assertThat(a.getIban()).as("check iban").isEqualTo(expected.getIban()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentConfigurationUpdatableRelationshipsEquals(PaymentConfiguration expected, PaymentConfiguration actual) {
        assertThat(actual)
            .as("Verify PaymentConfiguration relationships")
            .satisfies(a -> assertThat(a.getClientAccount()).as("check clientAccount").isEqualTo(expected.getClientAccount()));
    }
}
