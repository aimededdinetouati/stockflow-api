package com.adeem.stockflow.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAccountAllPropertiesEquals(ClientAccount expected, ClientAccount actual) {
        assertClientAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertClientAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAccountAllUpdatablePropertiesEquals(ClientAccount expected, ClientAccount actual) {
        assertClientAccountUpdatableFieldsEquals(expected, actual);
        assertClientAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAccountAutoGeneratedPropertiesEquals(ClientAccount expected, ClientAccount actual) {
        assertThat(actual)
            .as("Verify ClientAccount auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAccountUpdatableFieldsEquals(ClientAccount expected, ClientAccount actual) {
        assertThat(actual)
            .as("Verify ClientAccount relevant properties")
            .satisfies(a -> assertThat(a.getCompanyName()).as("check companyName").isEqualTo(expected.getCompanyName()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAccountUpdatableRelationshipsEquals(ClientAccount expected, ClientAccount actual) {
        assertThat(actual)
            .as("Verify ClientAccount relationships")
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getQuota()).as("check quota").isEqualTo(expected.getQuota()));
    }
}
