package com.adeem.stockflow.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlanFeatureAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanFeatureAllPropertiesEquals(PlanFeature expected, PlanFeature actual) {
        assertPlanFeatureAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanFeatureAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanFeatureAllUpdatablePropertiesEquals(PlanFeature expected, PlanFeature actual) {
        assertPlanFeatureUpdatableFieldsEquals(expected, actual);
        assertPlanFeatureUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanFeatureAutoGeneratedPropertiesEquals(PlanFeature expected, PlanFeature actual) {
        assertThat(actual)
            .as("Verify PlanFeature auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanFeatureUpdatableFieldsEquals(PlanFeature expected, PlanFeature actual) {
        assertThat(actual)
            .as("Verify PlanFeature relevant properties")
            .satisfies(a -> assertThat(a.getFeatureName()).as("check featureName").isEqualTo(expected.getFeatureName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getIsIncluded()).as("check isIncluded").isEqualTo(expected.getIsIncluded()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanFeatureUpdatableRelationshipsEquals(PlanFeature expected, PlanFeature actual) {
        assertThat(actual)
            .as("Verify PlanFeature relationships")
            .satisfies(a -> assertThat(a.getPlanFormula()).as("check planFormula").isEqualTo(expected.getPlanFormula()));
    }
}
