package com.adeem.stockflow.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SupplierAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplierAllPropertiesEquals(Supplier expected, Supplier actual) {
        assertSupplierAutoGeneratedPropertiesEquals(expected, actual);
        assertSupplierAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplierAllUpdatablePropertiesEquals(Supplier expected, Supplier actual) {
        assertSupplierUpdatableFieldsEquals(expected, actual);
        assertSupplierUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplierAutoGeneratedPropertiesEquals(Supplier expected, Supplier actual) {
        assertThat(actual)
            .as("Verify Supplier auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplierUpdatableFieldsEquals(Supplier expected, Supplier actual) {
        assertThat(actual)
            .as("Verify Supplier relevant properties")
            .satisfies(a -> assertThat(a.getFirstName()).as("check firstName").isEqualTo(expected.getFirstName()))
            .satisfies(a -> assertThat(a.getLastName()).as("check lastName").isEqualTo(expected.getLastName()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getFax()).as("check fax").isEqualTo(expected.getFax()))
            .satisfies(a -> assertThat(a.getTaxId()).as("check taxId").isEqualTo(expected.getTaxId()))
            .satisfies(a ->
                assertThat(a.getRegistrationArticle()).as("check registrationArticle").isEqualTo(expected.getRegistrationArticle())
            )
            .satisfies(a -> assertThat(a.getStatisticalId()).as("check statisticalId").isEqualTo(expected.getStatisticalId()))
            .satisfies(a -> assertThat(a.getRc()).as("check rc").isEqualTo(expected.getRc()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplierUpdatableRelationshipsEquals(Supplier expected, Supplier actual) {
        assertThat(actual)
            .as("Verify Supplier relationships")
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getClientAccount()).as("check clientAccount").isEqualTo(expected.getClientAccount()));
    }
}
