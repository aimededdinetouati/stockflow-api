package com.adeem.stockflow.domain;

import static com.adeem.stockflow.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class InventoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryAllPropertiesEquals(Inventory expected, Inventory actual) {
        assertInventoryAutoGeneratedPropertiesEquals(expected, actual);
        assertInventoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryAllUpdatablePropertiesEquals(Inventory expected, Inventory actual) {
        assertInventoryUpdatableFieldsEquals(expected, actual);
        assertInventoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryAutoGeneratedPropertiesEquals(Inventory expected, Inventory actual) {
        assertThat(actual)
            .as("Verify Inventory auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryUpdatableFieldsEquals(Inventory expected, Inventory actual) {
        assertThat(actual)
            .as("Verify Inventory relevant properties")
            .satisfies(a ->
                assertThat(a.getQuantity()).as("check quantity").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getQuantity())
            )
            .satisfies(a ->
                assertThat(a.getAvailableQuantity())
                    .as("check availableQuantity")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getAvailableQuantity())
            )
            .satisfies(a -> assertThat(a.getLastUpdated()).as("check lastUpdated").isEqualTo(expected.getLastUpdated()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryUpdatableRelationshipsEquals(Inventory expected, Inventory actual) {
        assertThat(actual)
            .as("Verify Inventory relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()));
    }
}
