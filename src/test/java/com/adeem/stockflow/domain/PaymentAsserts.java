package com.adeem.stockflow.domain;

import static com.adeem.stockflow.domain.AssertUtils.bigDecimalCompareTo;
import static com.adeem.stockflow.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PaymentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAllPropertiesEquals(Payment expected, Payment actual) {
        assertPaymentAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAllUpdatablePropertiesEquals(Payment expected, Payment actual) {
        assertPaymentUpdatableFieldsEquals(expected, actual);
        assertPaymentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAutoGeneratedPropertiesEquals(Payment expected, Payment actual) {
        assertThat(actual)
            .as("Verify Payment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentUpdatableFieldsEquals(Payment expected, Payment actual) {
        assertThat(actual)
            .as("Verify Payment relevant properties")
            .satisfies(a -> assertThat(a.getReference()).as("check reference").isEqualTo(expected.getReference()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getDate()).as("check date").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getDate())
            )
            .satisfies(a -> assertThat(a.getMethod()).as("check method").isEqualTo(expected.getMethod()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getGateway()).as("check gateway").isEqualTo(expected.getGateway()))
            .satisfies(a ->
                assertThat(a.getChargilyCheckoutUrl()).as("check chargilyCheckoutUrl").isEqualTo(expected.getChargilyCheckoutUrl())
            )
            .satisfies(a ->
                assertThat(a.getChargilyTransactionId()).as("check chargilyTransactionId").isEqualTo(expected.getChargilyTransactionId())
            )
            .satisfies(a -> assertThat(a.getBankName()).as("check bankName").isEqualTo(expected.getBankName()))
            .satisfies(a -> assertThat(a.getAccountNumber()).as("check accountNumber").isEqualTo(expected.getAccountNumber()))
            .satisfies(a ->
                assertThat(a.getTransferReferenceNumber())
                    .as("check transferReferenceNumber")
                    .isEqualTo(expected.getTransferReferenceNumber())
            )
            .satisfies(a -> assertThat(a.getReconciled()).as("check reconciled").isEqualTo(expected.getReconciled()))
            .satisfies(a ->
                assertThat(a.getReconciledDate())
                    .as("check reconciledDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getReconciledDate())
            )
            .satisfies(a -> assertThat(a.getReconciledBy()).as("check reconciledBy").isEqualTo(expected.getReconciledBy()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentUpdatableRelationshipsEquals(Payment expected, Payment actual) {
        assertThat(actual)
            .as("Verify Payment relationships")
            .satisfies(a -> assertThat(a.getClientAccount()).as("check clientAccount").isEqualTo(expected.getClientAccount()))
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()));
    }
}
