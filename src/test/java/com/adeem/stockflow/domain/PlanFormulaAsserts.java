package com.adeem.stockflow.domain;

import static com.adeem.stockflow.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PlanFormulaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanFormulaAllPropertiesEquals(PlanFormula expected, PlanFormula actual) {
        assertPlanFormulaAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanFormulaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanFormulaAllUpdatablePropertiesEquals(PlanFormula expected, PlanFormula actual) {
        assertPlanFormulaUpdatableFieldsEquals(expected, actual);
        assertPlanFormulaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanFormulaAutoGeneratedPropertiesEquals(PlanFormula expected, PlanFormula actual) {
        assertThat(actual)
            .as("Verify PlanFormula auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanFormulaUpdatableFieldsEquals(PlanFormula expected, PlanFormula actual) {
        assertThat(actual)
            .as("Verify PlanFormula relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a ->
                assertThat(a.getBasePrice()).as("check basePrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBasePrice())
            )
            .satisfies(a -> assertThat(a.getBillingCycle()).as("check billingCycle").isEqualTo(expected.getBillingCycle()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanFormulaUpdatableRelationshipsEquals(PlanFormula expected, PlanFormula actual) {
        // empty method
    }
}
