package com.adeem.stockflow.domain;

import static com.adeem.stockflow.domain.AssertUtils.bigDecimalCompareTo;
import static com.adeem.stockflow.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ReturnOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReturnOrderAllPropertiesEquals(ReturnOrder expected, ReturnOrder actual) {
        assertReturnOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertReturnOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReturnOrderAllUpdatablePropertiesEquals(ReturnOrder expected, ReturnOrder actual) {
        assertReturnOrderUpdatableFieldsEquals(expected, actual);
        assertReturnOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReturnOrderAutoGeneratedPropertiesEquals(ReturnOrder expected, ReturnOrder actual) {
        assertThat(actual)
            .as("Verify ReturnOrder auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReturnOrderUpdatableFieldsEquals(ReturnOrder expected, ReturnOrder actual) {
        assertThat(actual)
            .as("Verify ReturnOrder relevant properties")
            .satisfies(a -> assertThat(a.getReference()).as("check reference").isEqualTo(expected.getReference()))
            .satisfies(a ->
                assertThat(a.getReturnDate())
                    .as("check returnDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getReturnDate())
            )
            .satisfies(a ->
                assertThat(a.getProcessedDate())
                    .as("check processedDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getProcessedDate())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getReturnType()).as("check returnType").isEqualTo(expected.getReturnType()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a ->
                assertThat(a.getRefundAmount())
                    .as("check refundAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getRefundAmount())
            )
            .satisfies(a ->
                assertThat(a.getOriginalOrderReference()).as("check originalOrderReference").isEqualTo(expected.getOriginalOrderReference())
            )
            .satisfies(a -> assertThat(a.getIsPartialReturn()).as("check isPartialReturn").isEqualTo(expected.getIsPartialReturn()))
            .satisfies(a ->
                assertThat(a.getDiscountAllocationMethod())
                    .as("check discountAllocationMethod")
                    .isEqualTo(expected.getDiscountAllocationMethod())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReturnOrderUpdatableRelationshipsEquals(ReturnOrder expected, ReturnOrder actual) {
        assertThat(actual)
            .as("Verify ReturnOrder relationships")
            .satisfies(a -> assertThat(a.getClientAccount()).as("check clientAccount").isEqualTo(expected.getClientAccount()))
            .satisfies(a -> assertThat(a.getProcessedBy()).as("check processedBy").isEqualTo(expected.getProcessedBy()))
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()))
            .satisfies(a -> assertThat(a.getSupplier()).as("check supplier").isEqualTo(expected.getSupplier()))
            .satisfies(a -> assertThat(a.getOriginalSaleOrder()).as("check originalSaleOrder").isEqualTo(expected.getOriginalSaleOrder()))
            .satisfies(a ->
                assertThat(a.getOriginalPurchaseOrder()).as("check originalPurchaseOrder").isEqualTo(expected.getOriginalPurchaseOrder())
            );
    }
}
