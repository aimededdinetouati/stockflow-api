package com.adeem.stockflow.domain;

import static com.adeem.stockflow.domain.AssertUtils.bigDecimalCompareTo;
import static com.adeem.stockflow.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class SubscriptionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionAllPropertiesEquals(Subscription expected, Subscription actual) {
        assertSubscriptionAutoGeneratedPropertiesEquals(expected, actual);
        assertSubscriptionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionAllUpdatablePropertiesEquals(Subscription expected, Subscription actual) {
        assertSubscriptionUpdatableFieldsEquals(expected, actual);
        assertSubscriptionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionAutoGeneratedPropertiesEquals(Subscription expected, Subscription actual) {
        assertThat(actual)
            .as("Verify Subscription auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionUpdatableFieldsEquals(Subscription expected, Subscription actual) {
        assertThat(actual)
            .as("Verify Subscription relevant properties")
            .satisfies(a ->
                assertThat(a.getStartDate())
                    .as("check startDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getStartDate())
            )
            .satisfies(a ->
                assertThat(a.getEndDate()).as("check endDate").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getEndDate())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPaymentMethod()).as("check paymentMethod").isEqualTo(expected.getPaymentMethod()))
            .satisfies(a ->
                assertThat(a.getActualPrice())
                    .as("check actualPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getActualPrice())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionUpdatableRelationshipsEquals(Subscription expected, Subscription actual) {
        assertThat(actual)
            .as("Verify Subscription relationships")
            .satisfies(a -> assertThat(a.getPlanFormula()).as("check planFormula").isEqualTo(expected.getPlanFormula()))
            .satisfies(a -> assertThat(a.getClientAccount()).as("check clientAccount").isEqualTo(expected.getClientAccount()));
    }
}
