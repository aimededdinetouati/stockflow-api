package com.adeem.stockflow.domain;

import static com.adeem.stockflow.domain.AssertUtils.bigDecimalCompareTo;
import static com.adeem.stockflow.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(actual)
            .as("Verify Product auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
        //.satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
        //.satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(actual)
            .as("Verify Product relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getManufacturerCode()).as("check manufacturerCode").isEqualTo(expected.getManufacturerCode()))
            .satisfies(a -> assertThat(a.getUpc()).as("check upc").isEqualTo(expected.getUpc()))
            .satisfies(a ->
                assertThat(a.getSellingPrice())
                    .as("check sellingPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getSellingPrice())
            )
            .satisfies(a ->
                assertThat(a.getCostPrice()).as("check costPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getCostPrice())
            )
            .satisfies(a ->
                assertThat(a.getProfitMargin())
                    .as("check profitMargin")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getProfitMargin())
            )
            .satisfies(a ->
                assertThat(a.getMinimumStockLevel())
                    .as("check minimumStockLevel")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getMinimumStockLevel())
            )
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a -> assertThat(a.getApplyTva()).as("check applyTva").isEqualTo(expected.getApplyTva()))
            .satisfies(a ->
                assertThat(a.getIsVisibleToCustomers()).as("check isVisibleToCustomers").isEqualTo(expected.getIsVisibleToCustomers())
            )
            .satisfies(a ->
                assertThat(a.getExpirationDate())
                    .as("check expirationDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getExpirationDate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {
        assertThat(actual)
            .as("Verify Product relationships")
            .satisfies(a -> assertThat(a.getClientAccount()).as("check clientAccount").isEqualTo(expected.getClientAccount()))
            .satisfies(a -> assertThat(a.getProductFamily()).as("check productFamily").isEqualTo(expected.getProductFamily()));
    }
}
