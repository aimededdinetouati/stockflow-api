package com.adeem.stockflow.domain;

import static com.adeem.stockflow.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SaleOrderItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOrderItemAllPropertiesEquals(SaleOrderItem expected, SaleOrderItem actual) {
        assertSaleOrderItemAutoGeneratedPropertiesEquals(expected, actual);
        assertSaleOrderItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOrderItemAllUpdatablePropertiesEquals(SaleOrderItem expected, SaleOrderItem actual) {
        assertSaleOrderItemUpdatableFieldsEquals(expected, actual);
        assertSaleOrderItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOrderItemAutoGeneratedPropertiesEquals(SaleOrderItem expected, SaleOrderItem actual) {
        assertThat(actual)
            .as("Verify SaleOrderItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOrderItemUpdatableFieldsEquals(SaleOrderItem expected, SaleOrderItem actual) {
        assertThat(actual)
            .as("Verify SaleOrderItem relevant properties")
            .satisfies(a ->
                assertThat(a.getQuantity()).as("check quantity").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getQuantity())
            )
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a -> assertThat(a.getTotal()).as("check total").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotal()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOrderItemUpdatableRelationshipsEquals(SaleOrderItem expected, SaleOrderItem actual) {
        assertThat(actual)
            .as("Verify SaleOrderItem relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()))
            .satisfies(a -> assertThat(a.getSaleOrder()).as("check saleOrder").isEqualTo(expected.getSaleOrder()));
    }
}
