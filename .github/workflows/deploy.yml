name: Deploy to VPS

on:
  push:
    branches: [main, master]
  workflow_dispatch: # Allow manual triggering

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/stockflowapi
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build application
        run: |
          chmod +x ./mvnw
          ./mvnw clean compile -Pprod -DskipTests

      - name: Build and Push Docker image to Docker Hub
        run: |
          ./mvnw jib:build -Pprod -DskipTests \
            -Djib.to.image=${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            -Djib.to.tags=${{ env.DOCKER_IMAGE }}:latest

      - name: Copy Docker Compose files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: 'src/main/docker/'
          target: /opt/stockflowapi/
          strip_components: 0

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "Starting deployment..."

            # Create app directory and navigate
            mkdir -p /opt/stockflowapi
            cd /opt/stockflowapi

            # Login to Docker Hub on VPS
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            # Stop existing services gracefully
            echo "Stopping existing services..."
            docker compose -f src/main/docker/app.yml down 2>/dev/null || true

            # Configure for production deployment
            echo "Configuring for production..."
            # Make app accessible from internet (not just localhost)
            sed -i 's/127.0.0.1:8080:8080/8080:8080/g' src/main/docker/app.yml
            sed -i 's/127.0.0.1:5432:5432/5432:5432/g' src/main/docker/postgresql.yml

            # Update app.yml to use the Docker Hub image
            sed -i "s|image: stockflowapi|image: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}|g" src/main/docker/app.yml

            # Pull the latest application image from Docker Hub
            echo "Pulling latest application image from Docker Hub..."
            docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

            # Start all services (app + database)
            echo "Starting application and database..."
            docker compose -f src/main/docker/app.yml up -d

            # Wait for services to fully start
            echo "Waiting for services to start..."
            sleep 30

            # Display service status
            echo "Checking service status..."
            docker compose -f src/main/docker/app.yml ps

            # Check application health
            echo "Checking application health..."
            sleep 10
            curl -f http://localhost:8080/management/health || echo "Health check failed - app may still be starting"

            # Cleanup old unused images to save disk space
            echo "Cleaning up old images..."
            docker image prune -f

            # Logout from Docker Hub for security
            docker logout

            # Get public IP and show access URL
            PUBLIC_IP=$(curl -s ifconfig.me)
            echo "=================================="
            echo "Deployment completed successfully!"
            echo "Application URL: http://$PUBLIC_IP:8080"
            echo "Health Check: http://$PUBLIC_IP:8080/management/health"
            echo "=================================="
