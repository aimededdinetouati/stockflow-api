name: Deploy to VPS

on:
  push:
    branches: [main, master]
  workflow_dispatch: # Allow manual triggering

env:
  DOCKER_IMAGE: stockflowapi
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build application
        run: |
          chmod +x ./mvnw
          ./mvnw clean compile -Pprod -DskipTests

      - name: Build Docker image
        run: |
          ./mvnw jib:dockerBuild -Pprod -DskipTests
          docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

      - name: Save Docker image
        run: |
          docker save ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} | gzip > stockflowapi-image.tar.gz

      - name: Copy Docker image to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: stockflowapi-image.tar.gz
          target: /tmp/

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "Starting deployment..."

            # Create app directory
            mkdir -p /opt/stockflowapi
            cd /opt/stockflowapi

            # Load the new Docker image
            echo "Loading Docker image..."
            docker load < /tmp/stockflowapi-image.tar.gz

            # Stop and remove existing container if it exists
            echo "Stopping existing container..."
            docker stop stockflowapi-container 2>/dev/null || true
            docker rm stockflowapi-container 2>/dev/null || true

            # Remove old image (keep only latest 2 versions)
            echo "Cleaning up old images..."
            docker images stockflowapi --format "table {{.Repository}}:{{.Tag}}" | tail -n +3 | xargs -r docker rmi || true

            echo "Deployment completed successfully!"
