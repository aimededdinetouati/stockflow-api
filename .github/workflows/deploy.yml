name: Deploy to VPS

on:
  push:
    branches: [main, master]
  workflow_dispatch: # Allow manual triggering

env:
  DOCKER_IMAGE: stockflowapi
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build application
        run: |
          chmod +x ./mvnw
          ./mvnw clean compile -Pprod -DskipTests

      - name: Build Docker image
        run: |
          ./mvnw jib:dockerBuild -Pprod -DskipTests -Dmaven.compiler.target=21 -Dmaven.compiler.source=21
          docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

      - name: Save Docker image
        run: |
          docker save ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} | gzip > stockflowapi-image.tar.gz

      - name: Copy Docker files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: 'stockflowapi-image.tar.gz,src/main/docker/'
          target: /opt/stockflowapi/
          strip_components: 0

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "Starting deployment..."

            # Create app directory and navigate
            mkdir -p /opt/stockflowapi
            cd /opt/stockflowapi

            # Load the new Docker image
            echo "Loading Docker image..."
            docker load < stockflowapi-image.tar.gz

            # Stop existing services
            echo "Stopping existing services..."
            docker compose -f src/main/docker/app.yml down 2>/dev/null || true

            # Update app.yml to expose on all interfaces (not just localhost)
            echo "Configuring for production..."
            sed -i 's/127.0.0.1:8080:8080/8080:8080/g' src/main/docker/app.yml
            sed -i 's/127.0.0.1:5432:5432/5432:5432/g' src/main/docker/postgresql.yml

            # Start services with docker compose
            echo "Starting application and database..."
            docker compose -f src/main/docker/app.yml up -d

            # Wait for services to be healthy
            echo "Waiting for services to start..."
            sleep 30

            # Check if services are running
            echo "Checking service status..."
            docker compose -f src/main/docker/app.yml ps

            # Cleanup old images
            echo "Cleaning up old images..."
            docker image prune -f

            echo "Deployment completed successfully!"
            echo "Application should be accessible at: http://$(curl -s ifconfig.me):8080"
